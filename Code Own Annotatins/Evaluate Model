{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"8veRV2mX0adO"},"outputs":[],"source":["import os\n","%pip install ultralytics\n","import ultralytics\n","ultralytics.checks()\n","# other libraries\n","!pip install geopandas\n","!pip install rasterio\n","!pip install folium matplotlib mapclassify\n","# general python packages\n","import os, glob, shutil\n","from pathlib import Path\n","from datetime import datetime, timedelta\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import folium\n","#import warnings\n","#warnings.filterwarnings(\"ignore\")\n","#import sys\n","\n","# geospatial packages\n","from osgeo import gdal, ogr, osr\n","import geopandas as gpd\n","from shapely.geometry import Polygon\n","import rasterio as rio\n","path_osgeo_utils= \"/usr/local/lib/python3.10/dist-packages/osgeo_utils\" # defines path to gdal_retile.py\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tQu9tBC-5baR"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20913,"status":"ok","timestamp":1687438850336,"user":{"displayName":"Raul de Paula Pires","userId":"05469231641184774623"},"user_tz":-120},"id":"1DKqSfJI0wQ9","outputId":"fc7b0125-554d-4cb7-aae8-95f8f78a9b30"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["annotator_ID=16 # change this to your folder ID\n","\n","galbyveien= \"/content/drive/MyDrive/NOVA_Deep/Processing/galbyveien_20230504_sun.tif\"\n","braatan = \"/content/drive/MyDrive/NOVA_Deep/Processing/braatan_20230504_sun.tif\"\n","krakstad = \"/content/drive/MyDrive/NOVA_Deep/Processing/krakstad_202304_sun.tif\"\n","hobol = \"/content/drive/MyDrive/NOVA_Deep/Processing/ortho_hobol_042222_mavic_sun.tif\"\n","\n","path_to_tiles_galbyveien=\"/content/drive/MyDrive/NOVA_course_deep_learning/data/tiles/10m_\"+\"galbyveien_20230504_sun\"\n","path_to_tiles_krakstad=\"/content/drive/MyDrive/NOVA_course_deep_learning/data/tiles/10m_\"+\"krakstad_202304_sun\"\n","path_to_tiles_braatan=\"/content/drive/MyDrive/NOVA_course_deep_learning/data/tiles/10m_\"+\"braatan_40m_20230605_sun\"\n","path_to_tiles_hobol=\"/content/drive/MyDrive/NOVA_course_deep_learning/data/tiles/10m_\"+\"ortho_hobol_042222_mavic_sun\"\n","\n","path_to_YOLOm_b64=\"/content/drive/MyDrive/NOVA_course_deep_learning/data/annotated_data/train/\"+str(annotator_ID)+\"/NOVA_YOLOv8_OwnAnnotation_YOLOm_b64/weights/best.pt\"\n","\n","# mount google drive\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"20gNfqUp18JZ","executionInfo":{"status":"ok","timestamp":1687439053876,"user_tz":-120,"elapsed":223,"user":{"displayName":"Raul de Paula Pires","userId":"05469231641184774623"}}},"outputs":[],"source":["path_to_YOLOm_b64=\"/content/drive/MyDrive/NOVA_course_deep_learning/data/annotated_data/train/\"+str(annotator_ID)+\"/NOVA_YOLOv8_OwnAnnotation_YOLOm_b64/weights/best.pt\""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qV5uwSoP1YqE"},"outputs":[],"source":["# Params:\n","#   - input_ortho_path: path to orthophoto to predict on (\"/content/drive/MyDrive/NOVA_course_deep_learning/data/orthomosaics/test_data/krakstad_202304_sun.tif\")\n","#   - footprints_path: path to multipolygon layer of tile footprints (\"/content/drive/MyDrive/NOVA_course_deep_learning/data/map_data/drone_acquisitions.geojson\")\n","#   - tile_size_m: tile size in m\n","#   - buffer_size_m= size of overlap area around each tile in m (used for removing boundary effects)\n","# input_ortho_path=\n","# footprints_path=\n","\n","def tile_orthomosaic(input_ortho_path,footprints_path, tile_size_m, buffer_size_m):\n","  # Define path to data\n","  path_data=\"/content/drive/MyDrive/NOVA_course_deep_learning/data\"\n","\n","  # read drone acquisition footprints\n","  footprints= gpd.read_file(footprints_path)\n","  # Get ortho name\n","  ortho_name=os.path.splitext(os.path.basename(input_ortho_path)) [0]\n","\n","  # create output dir\n","  output_tiles_dir=path_data+\"/tiles/\"+str(tile_size_m)+\"m_\"+ortho_name\n","  if not os.path.exists(output_tiles_dir):\n","    print(\"Creating output folder...\"+ output_tiles_dir)\n","    os.makedirs(output_tiles_dir)\n","\n","  # get raster metadata\n","  # Get pixel resolution (in meters) and tile size in pixels\n","  src_ds = gdal.Open(input_ortho_path) # reads in the orthomosaic\n","  _, xres, _, _, _, yres  = src_ds.GetGeoTransform() # get pixel size in meters\n","  print(\"Ortho resolution: \"+str(round(xres,4))+\" m\")\n","  # Get EPSG code\n","  proj = osr.SpatialReference(wkt=src_ds.GetProjection())\n","  EPSG_code= proj.GetAttrValue('AUTHORITY',1)\n","  print(\"EPSG code: \"+str(EPSG_code))\n","  # get number of bands\n","  n_bands=src_ds.RasterCount\n","  print(\"Number of bands: \"+str(n_bands))\n","\n","  # Compute tile and buffer size in pixels\n","  tile_size_px= round(tile_size_m/abs(xres)) # calculate the tile size in pixels\n","  buffer_size_px= round(buffer_size_m/abs(xres)) # calculate the buffer size in pixels\n","  tileIndex_name=ortho_name+\"_tile_index\" # define name for output tile index shapefile\n","\n","  # Run gdal_retile.py using (can take some minutes)\n","  command_retile = \"python \"+path_osgeo_utils+\"/gdal_retile.py -targetDir \" + output_tiles_dir + \" \" + input_ortho_path+ \" -overlap \" + str(buffer_size_px) + \" -ps \"+str(tile_size_px) + \" \" + str(tile_size_px) + \" -of GTiff -tileIndex \"+ tileIndex_name + \" -tileIndexField ID\"\n","  print(os.popen(command_retile).read()) ################################################################### SWITCH THIS ONE FOR TILING #########################################\n","\n","  # cleanup tiles\n","  footprint_ortho= footprints[footprints['filename']==ortho_name]\n","  footprint_ortho_UU= footprint_ortho.geometry.unary_union\n","  # Load tiles shapefile\n","  tiles = gpd.read_file(output_tiles_dir+ \"/\"+ortho_name+\"_tile_index.shp\")\n","  tiles= tiles.to_crs(EPSG_code)\n","\n","  # Select all tiles that are within the boundary polygon\n","  tiles_in = tiles[tiles.geometry.within(footprint_ortho_UU)]\n","\n","  # Select all tiles that are not within the boundary polygon\n","  tiles_out= tiles.loc[~tiles['ID'].isin(tiles_in['ID']) ]\n","  print(str(len(tiles_out))+\" tiles to be deleted\")\n","\n","  # delete tiles that are not within the footprint\n","  gtiffs_delete=[output_tiles_dir+ \"/\"+sub  for sub in tiles_out['ID']]\n","  for f in gtiffs_delete:\n","   if os.path.exists(f):\n","     os.remove(f)\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OuNFcwf11ZU-"},"outputs":[],"source":["# Tile the 4 orthomosaics for prediction\n","tile_orthomosaic(input_ortho_path=galbyveien,\n","                 footprints_path= \"/content/drive/MyDrive/NOVA_course_deep_learning/data/map_data/drone_acquisitions.geojson\",\n","                 tile_size_m=10, # this could be changed\n","                 buffer_size_m=1) # this could be changed\n","\n","\n","tile_orthomosaic(input_ortho_path=krakstad,\n","                 footprints_path= \"/content/drive/MyDrive/NOVA_course_deep_learning/data/map_data/drone_acquisitions.geojson\",\n","                 tile_size_m=10, # this could be changed\n","                 buffer_size_m=1) # this could be changed\n","\n","tile_orthomosaic(input_ortho_path=hobol,\n","                 footprints_path= \"/content/drive/MyDrive/NOVA_course_deep_learning/data/map_data/drone_acquisitions.geojson\",\n","                 tile_size_m=10, # this could be changed\n","                 buffer_size_m=1) # this could be changed\n","\n","tile_orthomosaic(input_ortho_path=braatan,\n","                 footprints_path= \"/content/drive/MyDrive/NOVA_course_deep_learning/data/map_data/drone_acquisitions.geojson\",\n","                 tile_size_m=10, # this could be changed\n","                 buffer_size_m=1) # this could be changed"]},{"cell_type":"code","source":["path_to_tiles"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"OJwXCEsAIZD5","executionInfo":{"status":"ok","timestamp":1687437813757,"user_tz":-120,"elapsed":7,"user":{"displayName":"Raul de Paula Pires","userId":"05469231641184774623"}},"outputId":"b692adc3-372b-46ad-b5ba-f89f12da6a5c"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content/drive/MyDrive/NOVA_course_deep_learning/data/tiles/10m_galbyveien_20230504_sun'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uXEQr1mF1dGX"},"outputs":[],"source":["# The model with the highest F1 score was YOLOm with the batck size equal to 64. F1 = 0.5 @ 0.595\n","# Predict on the 4 test sites\n","\n","!yolo predict model=$path_to_YOLOm_b64 source=$path_to_tiles_galbyveien imgsz=640 conf=0.595 project=$path_to_tiles_galbyveien name=predict_YOLOm_b64_Raul save_txt=True save_conf=True save=True line_width=1\n","!yolo predict model=$path_to_YOLOm_b64 source=$path_to_tiles_krakstad imgsz=640 conf=0.595 project=$path_to_tiles_krakstad name=predict_YOLOm_b64_Raul save_txt=True save_conf=True save=True line_width=1\n","!yolo predict model=$path_to_YOLOm_b64 source=$path_to_tiles_braatan imgsz=640 conf=0.595 project=$path_to_tiles_braatan name=predict_YOLOm_b64_Raul save_txt=True save_conf=True save=True line_width=1\n","!yolo predict model=$path_to_YOLOm_b64 source=$path_to_tiles_hobol imgsz=640 conf=0.595 project=$path_to_tiles_hobol name=predict_YOLOm_b64_Raul save_txt=True save_conf=True save=True line_width=1"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vJawuG0M5cvc"},"outputs":[],"source":["\n"]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[],"authorship_tag":"ABX9TyMmanqVgVJOJMJecRof04hJ"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}